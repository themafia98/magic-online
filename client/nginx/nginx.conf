# This number should be, at maximum, the number of CPU cores on your system.
worker_processes auto;

# Number of file descriptors used for Nginx.
worker_rlimit_nofile 200000;

# Only log critical errors.
error_log /var/log/nginx/error.log crit;

events {
    # Determines how many clients will be served by each worker process.
    worker_connections 4000;

    # The effective method, used on Linux 2.6+, optmized to serve many clients with each thread.
    use epoll;

    # Accept as many connections as possible, after nginx gets notification about a new connection.
    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Disable access log altogether.
    access_log off;

    # Sendfile copies data between one FD and other from within the kernel.
    sendfile on;

    # Causes nginx to attempt to send its HTTP response head in one packet,  instead of using partial frames.
    tcp_nopush on;

    # Don't buffer data-sends (disable Nagle algorithm).
    tcp_nodelay on;

    client_max_body_size 100m;

    keepalive_timeout  65;

    # Compression.
    gzip on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "msie6";

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        # access_log  logs/host.access.log  main;

        location /api/ {
          proxy_pass http://magic_backend:9229/;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Host $host;
          proxy_cache_bypass $http_upgrade;
        }

        location /socket.io { # listen node.js ws connection
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_pass http://magic_backend:9229/;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "Upgrade";
        }

    #    rewrite /static/js/app.js  /static/js/bundle.js temporary;

         location / {
           root   /usr/share/nginx/html;
           add_header Access-Control-Allow-Origin "*";
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for;
    #      proxy_set_header Host $host;
           proxy_set_header X-Forwarded-Proto $remote_addr;
           proxy_set_header X-Forwarded-Protocol $scheme;
           proxy_redirect off;

           # Send websocket data to the backend aswell
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection "upgrade";
        }

        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
           root   /usr/share/nginx/html;
        }
    }
}
